package ventanas;

import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import clases.Coneccion;
import java.awt.Color;
import java.awt.Graphics;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author luciano
 */
public class GraficarEstado extends javax.swing.JFrame {

    String user;
    int nuevoIngreso, noReparado, enRevision, reparado, entregado;

    String[] vectorEstado = new String[6];
    int[] vectorCantidadEstado = new int[6];

    /**
     * Creates new form GraficarEstado
     */
    public GraficarEstado() {
        initComponents();
        user = Login.userName;
        setSize(550, 450);
        setResizable(false);
        setTitle("Técnico - Sesión de " + user);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        ImageIcon wallpaper = new ImageIcon("src/images/wallpaperPrincipal.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(labelFondo.getWidth(), labelFondo.getHeight(), Image.SCALE_DEFAULT));
        labelFondo.setIcon(icono);
        this.repaint();

        try {
            Connection cn = new Coneccion().conectar();
            //Obtenemos la cantidad de equipos registrados con un parametro especifico en este caso 'estatus'
            //se selecciona de la tabla equipos todos los elementos que tengan un valor en estatus
            //y se crea una nueva columna que muestra enumerados la cantidad de elementos con un mismo estatus
            //con 'as' + cualquier nombre que queramos poner para asignar un nombre para la nueva columna
            String Query = "select estatus,count(estatus) as Cantidad from equipos group by estatus";
            PreparedStatement pst = cn.prepareStatement(Query);

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int posicion = 0;
                
                do {
                    vectorEstado[posicion] = rs.getString(1);
                    vectorCantidadEstado[posicion] = rs.getInt(2);

                    if (vectorEstado[posicion].equalsIgnoreCase("En revisión")) {
                        enRevision = vectorCantidadEstado[posicion];
                        
                    } else if (vectorEstado[posicion].equalsIgnoreCase("Entregado")) {
                        entregado = vectorCantidadEstado[posicion];
                        
                    } else if (vectorEstado[posicion].equalsIgnoreCase("No reparado")) {
                        noReparado = vectorCantidadEstado[posicion];
                        
                    } else if (vectorEstado[posicion].equalsIgnoreCase("Nuevo ingreso")) {
                        nuevoIngreso = vectorCantidadEstado[posicion];
                        
                    } else if (vectorEstado[posicion].equalsIgnoreCase("Reparado")) {
                        reparado = vectorCantidadEstado[posicion];
                    }

                    posicion++;
                } while (rs.next());
            }
        } catch (SQLException e) {
            System.err.println("Error en conectar con la base de datos." + e);
            JOptionPane.showMessageDialog(null, "Error");
        }
        repaint();
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("images/icon.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gráfica de estado");

        jLabel2.setText("Creado por Luciano Salgado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jLabel2))
            .addComponent(labelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(328, 328, 328)
                .addComponent(jLabel2))
            .addComponent(labelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficarEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficarEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficarEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficarEstado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficarEstado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel labelFondo;
    // End of variables declaration//GEN-END:variables

    public int estadoMasRepetido(int nuevoIngreso, int noReparado, int enResivision, int reparado, int entregado){
        if (nuevoIngreso > noReparado && nuevoIngreso > enResivision && nuevoIngreso > reparado && nuevoIngreso > entregado) {
            return nuevoIngreso;
        } else if(noReparado > enResivision && noReparado > reparado && noReparado > entregado){
            return noReparado;
        } else if(enResivision > reparado && enResivision > entregado){
            return enResivision;
        } else if(reparado > entregado) {
            return reparado;
        } else{
            return entregado;
        }       
    } 
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        int estadoMasRepetido = estadoMasRepetido(nuevoIngreso, noReparado, enRevision, reparado, entregado);
    
        int largoNuevoIngreso = nuevoIngreso * 400/ estadoMasRepetido;
        int largoNoReparado = noReparado * 400/ estadoMasRepetido;
        int largoEnRevision = enRevision * 400/ estadoMasRepetido;
        int largoReparado = reparado * 400/ estadoMasRepetido;
        int largoEntregado = entregado * 400/ estadoMasRepetido;
        
        //amarillo
        g.setColor(new Color(240, 248, 0));
        g.fillRect(100, 100, largoNuevoIngreso, 40);
        g.drawString("Nuevo Ingreso", 10, 120);
        g.drawString("Cantidad " + nuevoIngreso, 10, 133);
        
        //Rojo
        g.setColor(new Color(255, 0, 0));
        g.fillRect(100, 150, largoNoReparado, 40);
        g.drawString("No reparado", 10, 168);
        g.drawString("Cantidad " + noReparado, 10, 183);
        
        //Negro
        g.setColor(new Color(0, 0, 0));
        g.fillRect(100, 200, largoEnRevision, 40);
        g.drawString("En revisión", 10, 218);
        g.drawString("Cantidad " + enRevision, 10, 233);
        
        //Blanco
        g.setColor(new Color(255, 255, 255));
        g.fillRect(100, 250, largoReparado, 40);
        g.drawString("Reparado", 10, 268);
        g.drawString("Cantidad " + reparado, 10, 283);
        
        //Verde
        g.setColor(new Color(0, 85, 0));
        g.fillRect(100, 300, largoEntregado, 40);
        g.drawString("Entregado", 10, 310);
        g.drawString("Cantidad " + entregado, 10, 323);
    }
}
